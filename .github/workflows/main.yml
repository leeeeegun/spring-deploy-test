name: Deploy

on:
  push:
    branches:
      - main

env: 
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/spring-backend:latest

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java

      ## gradle caching     

      - name: Create application.yaml for CD Deploy
        run: |
          echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew

      ## greadle build
      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      ## docker build & push to production
name: Deploy

on:
  push:
    branches:
      - main

env: 
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/spring-backend:latest

jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu' # https://github.com/actions/setup-java

      ## gradle caching     

      - name: Create application.yaml for CD Deploy
        run: |
          echo "${{ secrets.PRODUCTION_ENV }}" > .env

      - name: Grant execute permission for gradlew
        run: |
          chmod +x gradlew

      ## greadle build
      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker buildx create --name arm64builder --use
          docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/${{ github.actor }}/spring-backend:latest --push .
          docker logout

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-spring-test ]
    steps:
      - name: Deploy to Production
        run: |
          echo "Starting Backend Production Deployment"
          cd /home/ec2-user/spring-deploy-test
          docker-compose down
  
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.DOCKER_IMAGE }}
  
          docker image prune -f
          docker logout
  
          docker-compose up -d

          docker-compose up -d

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-spring-test ]
    steps:
      - name: Deploy to Production
        run: |
          echo "Starting Backend Production Deployment"
          cd /home/ec2-user/spring-deploy-test
          docker-compose down
  
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.DOCKER_IMAGE }}
  
          docker image prune -f
          docker logout
  
          docker-compose up -d

          docker-compose up -d
